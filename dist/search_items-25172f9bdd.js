searchNodes=[{"doc":"Documentation for Wumpex.","ref":"Wumpex.html","title":"Wumpex","type":"module"},{"doc":"Fetch the bot key from configuration.iex&gt; Wumpex.token() &quot;DUMMY-TEST-TOKEN&quot;","ref":"Wumpex.html#token/0","title":"Wumpex.token/0","type":"function"},{"doc":"Fetch the user ID.The first time this method is called it will execute an API call.","ref":"Wumpex.html#user_id/0","title":"Wumpex.user_id/0","type":"function"},{"doc":"Represents a channel identifier.","ref":"Wumpex.html#t:channel/0","title":"Wumpex.channel/0","type":"type"},{"doc":"Represents a guild identifier.","ref":"Wumpex.html#t:guild/0","title":"Wumpex.guild/0","type":"type"},{"doc":"Represents the identifier of a shard.See Wumpex.Sharding, Wumpex.Gateway and the official Discord documentation for more information.","ref":"Wumpex.html#t:shard/0","title":"Wumpex.shard/0","type":"type"},{"doc":"Base module for defining a bot.The Wumpex.Bot module provides helpers to define event listeners to react to incoming events from Discord.","ref":"Wumpex.Bot.html","title":"Wumpex.Bot","type":"module"},{"doc":"Defines a new event listener for gateway events.","ref":"Wumpex.Bot.html#event/1","title":"Wumpex.Bot.event/1","type":"macro"},{"doc":"Defines a new event listener for gateway events, scoped per guild.","ref":"Wumpex.Bot.html#guild/1","title":"Wumpex.Bot.guild/1","type":"macro"},{"doc":"Wraps HTTPoison and configures it according to the Discord specifications.This module handles encoding outgoing requests, decoding incoming responses, adding the approperiate headers.","ref":"Wumpex.Api.html","title":"Wumpex.Api","type":"module"},{"doc":"Issues a DELETE request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#delete/3","title":"Wumpex.Api.delete/3","type":"function"},{"doc":"Issues a DELETE request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#delete!/3","title":"Wumpex.Api.delete!/3","type":"function"},{"doc":"Issues a GET request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#get/3","title":"Wumpex.Api.get/3","type":"function"},{"doc":"Issues a GET request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#get!/3","title":"Wumpex.Api.get!/3","type":"function"},{"doc":"Issues a HEAD request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#head/3","title":"Wumpex.Api.head/3","type":"function"},{"doc":"Issues a HEAD request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#head!/3","title":"Wumpex.Api.head!/3","type":"function"},{"doc":"Issues an OPTIONS request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#options/3","title":"Wumpex.Api.options/3","type":"function"},{"doc":"Issues a OPTIONS request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#options!/3","title":"Wumpex.Api.options!/3","type":"function"},{"doc":"Issues a PATCH request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#patch/4","title":"Wumpex.Api.patch/4","type":"function"},{"doc":"Issues a PATCH request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#patch!/4","title":"Wumpex.Api.patch!/4","type":"function"},{"doc":"Issues a POST request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#post/4","title":"Wumpex.Api.post/4","type":"function"},{"doc":"Issues a POST request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#post!/4","title":"Wumpex.Api.post!/4","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_headers/1.","ref":"Wumpex.Api.html#process_headers/1","title":"Wumpex.Api.process_headers/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_request_options/1.","ref":"Wumpex.Api.html#process_request_options/1","title":"Wumpex.Api.process_request_options/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_request_params/1.","ref":"Wumpex.Api.html#process_request_params/1","title":"Wumpex.Api.process_request_params/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_request_url/1.","ref":"Wumpex.Api.html#process_request_url/1","title":"Wumpex.Api.process_request_url/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_response/1.","ref":"Wumpex.Api.html#process_response/1","title":"Wumpex.Api.process_response/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_response_chunk/1.","ref":"Wumpex.Api.html#process_response_chunk/1","title":"Wumpex.Api.process_response_chunk/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_response_status_code/1.","ref":"Wumpex.Api.html#process_response_status_code/1","title":"Wumpex.Api.process_response_status_code/1","type":"function"},{"doc":"Callback implementation for HTTPoison.Base.process_status_code/1.","ref":"Wumpex.Api.html#process_status_code/1","title":"Wumpex.Api.process_status_code/1","type":"function"},{"doc":"Issues a PUT request to the given url.Returns {:ok, response} if the request is successful, {:error, reason} otherwise.See request/5 for more detailed information.","ref":"Wumpex.Api.html#put/4","title":"Wumpex.Api.put/4","type":"function"},{"doc":"Issues a PUT request to the given url, raising an exception in case of failure.If the request does not fail, the response is returned.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#put!/4","title":"Wumpex.Api.put!/4","type":"function"},{"doc":"Issues an HTTP request using a Request struct.This function returns {:ok, response}, {:ok, async_response}, or {:ok, maybe_redirect} if the request is successful, {:error, reason} otherwise.Redirect handlingIf the option :follow_redirect is given, HTTP redirects are automatically follow if the method is set to :get or :head and the response's status_code is 301, 302 or 307.If the method is set to :post, then the only status_code that get's automatically followed is 303.If any other method or status_code is returned, then this function returns a returns a {:ok, %HTTPoison.MaybeRedirect{}} containing the redirect_url for you to re-request with the method set to :get.Examplesrequest = %HTTPoison.Request{ method: :post, url: &quot;https://my.website.com&quot;, body: &quot;{\\&quot;foo\\&quot;: 3}&quot;, headers: [{&quot;Accept&quot;, &quot;application/json&quot;}] } request(request)","ref":"Wumpex.Api.html#request/1","title":"Wumpex.Api.request/1","type":"function"},{"doc":"Issues an HTTP request with the given method to the given url.This function is usually used indirectly by get/3, post/4, put/4, etcArgs:method - HTTP method as an atom (:get, :head, :post, :put, :delete, etc.)url - target url as a binary string or char listbody - request body. See more belowheaders - HTTP headers as an orddict (e.g., [{&quot;Accept&quot;, &quot;application/json&quot;}])options - Keyword list of optionsBody: see type HTTPoison.RequestOptions: see type HTTPoison.RequestThis function returns {:ok, response}, {:ok, async_response}, or {:ok, maybe_redirect} if the request is successful, {:error, reason} otherwise.Redirect handlingIf the option :follow_redirect is given, HTTP redirects are automatically follow if the method is set to :get or :head and the response's status_code is 301, 302 or 307.If the method is set to :post, then the only status_code that get's automatically followed is 303.If any other method or status_code is returned, then this function returns a returns a {:ok, %HTTPoison.MaybeRedirect{}} containing the redirect_url for you to re-request with the method set to :get.Examplesrequest(:post, &quot;https://my.website.com&quot;, &quot;{\\&quot;foo\\&quot;: 3}&quot;, [{&quot;Accept&quot;, &quot;application/json&quot;}])","ref":"Wumpex.Api.html#request/5","title":"Wumpex.Api.request/5","type":"function"},{"doc":"Issues an HTTP request with the given method to the given url, raising an exception in case of failure.request!/5 works exactly like request/5 but it returns just the response in case of a successful request, raising an exception in case the request fails.","ref":"Wumpex.Api.html#request!/5","title":"Wumpex.Api.request!/5","type":"function"},{"doc":"Starts HTTPoison and its dependencies.","ref":"Wumpex.Api.html#start/0","title":"Wumpex.Api.start/0","type":"function"},{"doc":"Requests the next message to be streamed for a given HTTPoison.AsyncResponse.See request!/5 for more detailed information.","ref":"Wumpex.Api.html#stream_next/1","title":"Wumpex.Api.stream_next/1","type":"function"},{"doc":"","ref":"Wumpex.Api.html#t:body/0","title":"Wumpex.Api.body/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:headers/0","title":"Wumpex.Api.headers/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:method/0","title":"Wumpex.Api.method/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:options/0","title":"Wumpex.Api.options/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:params/0","title":"Wumpex.Api.params/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:request/0","title":"Wumpex.Api.request/0","type":"type"},{"doc":"","ref":"Wumpex.Api.html#t:url/0","title":"Wumpex.Api.url/0","type":"type"},{"doc":"The Wumpex.Api.Ratelimit module handles dispatching HTTP requests through the Wumpex.Api module, but handles rate limits.Examplesiex&gt; Wumpex.Api.Ratelimit.get(&quot;http://localhost/test&quot;) {:ok, _response}","ref":"Wumpex.Api.Ratelimit.html","title":"Wumpex.Api.Ratelimit","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Api.Ratelimit.html#child_spec/1","title":"Wumpex.Api.Ratelimit.child_spec/1","type":"function"},{"doc":"Executes a given request using Wumpex.Api.request/5 using ratelimits.This means that if a rate limit would be encountered the request will either be bounced or delayed, depending on the configured timeout and when the resource will become available.For example, imagine the URL &quot;/test&quot; can be called once per 10 seconds:iex&gt; Wumpex.Api.Ratelimit.request({:get, &quot;http://localhost/test&quot;, &quot;&quot;, [], []}, {&quot;ratelimit&quot;, &quot;demo&quot;}) {:ok, %HTTPoison.Response{}} iex&gt; Wumpex.Api.Ratelimit.request({:get, &quot;http://localhost/test&quot;, &quot;&quot;, [], []}, {&quot;ratelimit&quot;, &quot;demo&quot;}) {:error, :bounced}The first request executes and returns the response (an instance of HTTPoison.Response.t/0), but the second request gets {:error, :bounced}. This is because after the first request we'd have to wait 10s, while we specified we only want to wait up to 5s (default, can be overriden by passing in a third parameter). If we'd have passed in 11s for example, the request would have been delayed 10s before executing, after which the response would be returned.You can choose to always execute the request, regardless of how long it would take until it can execute by passing :infinity as the third parameter.","ref":"Wumpex.Api.Ratelimit.html#request/3","title":"Wumpex.Api.Ratelimit.request/3","type":"function"},{"doc":"","ref":"Wumpex.Api.Ratelimit.html#t:bucket_tag/0","title":"Wumpex.Api.Ratelimit.bucket_tag/0","type":"type"},{"doc":"The state of the Wumpex.Api.Ratelimit process.Contains the following values::buckets - The :ets table containing all the bucket identifiers:bucket_states - The :ets table containing the state for all buckets.:well - The GenServer.server/0 of the Wumpex.Api.Ratelimit.Well process.","ref":"Wumpex.Api.Ratelimit.html#t:state/0","title":"Wumpex.Api.Ratelimit.state/0","type":"type"},{"doc":"Represents a single &quot;bucket&quot; in the rate limit system of Discord as described in the official documentation.Buckets are responsible for checking whether the given request is allowed to execute, and if not queue or bounce the request according to the given configuration. The StatelessBucket module gets an ETS table passed in on every request that contains the state for that specific bucket. This allows executing multiple requests on the same Discord bucket (but spread across multiple processes) and having a worker pool of buckets (using :poolboy).","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html","title":"Wumpex.Api.Ratelimit.StatelessBucket","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#child_spec/1","title":"Wumpex.Api.Ratelimit.StatelessBucket.child_spec/1","type":"function"},{"doc":"Executes the given http_call/0 and returns the http_response/0.Calls are executed using Wumpex.Api.request/5.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#execute/1","title":"Wumpex.Api.Ratelimit.StatelessBucket.execute/1","type":"function"},{"doc":"The state stored in the :ets table passed in command/0.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#t:bucket_state/0","title":"Wumpex.Api.Ratelimit.StatelessBucket.bucket_state/0","type":"type"},{"doc":"Represents a command for the bucket to execute.Each command contains 4 fields::http - A http_call/0 that represents the HTTP call to execute (if possible).:timeout - A timeout/0 that indicates how long the caller is willing to wait in case we need to queue.:state - An :ets.tid/0 table that contains the state for the http call resource (eg. remaining rate limit, reset, ...).:bucket - The name of the bucket in which this command will execute (used for state lookup).","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#t:command/0","title":"Wumpex.Api.Ratelimit.StatelessBucket.command/0","type":"type"},{"doc":"Contains all the information required for making a HTTP call.The elements correspond to the parameters of Wumpex.Api.request/5.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#t:http_call/0","title":"Wumpex.Api.Ratelimit.StatelessBucket.http_call/0","type":"type"},{"doc":"Represents the result of an executed http_call/0.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#t:http_response/0","title":"Wumpex.Api.Ratelimit.StatelessBucket.http_response/0","type":"type"},{"doc":"This module does not keep any state in the process.","ref":"Wumpex.Api.Ratelimit.StatelessBucket.html#t:state/0","title":"Wumpex.Api.Ratelimit.StatelessBucket.state/0","type":"type"},{"doc":"The well handles requests for routes which Wumpex doesn't know the bucket for.It executes the incoming requests, and then attempts to associate the key for that route to a bucket.","ref":"Wumpex.Api.Ratelimit.Well.html","title":"Wumpex.Api.Ratelimit.Well","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Api.Ratelimit.Well.html#child_spec/1","title":"Wumpex.Api.Ratelimit.Well.child_spec/1","type":"function"},{"doc":"","ref":"Wumpex.Api.Ratelimit.Well.html#t:command/0","title":"Wumpex.Api.Ratelimit.Well.command/0","type":"type"},{"doc":"This module does not keep any state in the process.","ref":"Wumpex.Api.Ratelimit.Well.html#t:state/0","title":"Wumpex.Api.Ratelimit.Well.state/0","type":"type"},{"doc":"A facade module for a registry that is either local or distributed. Ledger accomplishes this by using either the built-in Registry module (when compiling for local registry), or :syn (when compiling distributed).MotivationWumpex uses registers internally, but the built in Registry is only local, so it can't be used in a distributed scenario and when working locally using :syn for a registry would be total overkill. Ledger attempts to solve this problem by deciding at compile time which of the two libraries should be used, and conditionally compiles the module with only one of them active.UsageYou can use the Ledger module by simply calling use with it, and passing whether it's a :global registry or not. When compiling a global registry, Ledger uses :syn under the hood, so if you set the :global flag to true without :syn installed it'll throw a compiler error.Defining a local registry (only accessible on the same node):defmodule LocalRegistry do use Wumpex.Base.Ledger, global: false endDefining a global registry (available on every node):defmodule GlobalRegistry do use Wumpex.Base.Ledger, global: true endUsing in :viaBecause Ledger aims to provide maximal interchangeability between Registry and :syn, it also provides support for the :via registration (see GenServer documentation on registering with :via).If you start a GenServer with the :name option to be {:via, MyLedgerModule, &quot;name&quot;} for example, the GenServer will automatically be registered in the MyLedgerModule registry.You can also pass in metadata using {:via, MyLedgerModule, &quot;name&quot;, &quot;anything here&quot;} (metadata can be any type, not just strings).LimitationsWhen using a local registry you can register the same name under multiple (local) registries, since they'll all be isolated.When using a global registry however, the names you register will be shared over all global registries, since they'll all use :syn under the hood.","ref":"Wumpex.Base.Ledger.html","title":"Wumpex.Base.Ledger","type":"module"},{"doc":"A behaviour module for implementing the client of a websocket connection.A Websocket is a process like a common GenServer but handles the opening of the websocket transparently for you. All extensions made to the regular GenServer have been designed to closely match the behaviour of a regular GenServer.For example the handle_frame callback has very similiar return values to the handle_call callback of the GenServer.OptionsThe Websocket requires a few options to be passed in the start_link method::host - the hostname (ex: &quot;gateway.discord.gg&quot;).:port - the port to connect to (usually 80 for unencrypted and 443 for encrypted connections).:path - the path to which the websocket will connect (ex: &quot;/?v=8&quot;) and can (but doesn't have to) contain a query string.:timeout is a timeout/0 used to determine how long to wait for connecting and upgrading.See options/0 for more information.ExampleA module implementing the behaviour will be able to respond to incoming messages by implementing handle_frame:defmodule ExampleWebsocket do use Wumpex.Base.Websocket require Logger def on_connected(_options) do Logger.info(&quot;Connected!&quot;) end def handle_frame({:text, message}, state) do Logger.info(&quot;Received message&quot;) {:noreply, state} end end","ref":"Wumpex.Base.Websocket.html","title":"Wumpex.Base.Websocket","type":"behaviour"},{"doc":"Invoked to handle incoming frames from the websocket connection.frame is the frame/0 send by the server this websocket is connected to and state is the current state of the process.Returning {:reply, frame, new_state} will dispatch frame on the websocket and set new_state as the state of the process, while returning {:noreply, new_state} will not send any frames and set new_state as the new state of the process.You can also use the :reply and :noreply returns with an additional timeout/0 parameter, which behaves the same but will also set a timeout (See GenServer timeout section for more information).You can also reply with {:stop, new_state} to gracefully close the connection (after sending a close frame to the server) and terminate the process, or {:stop, close_reason, new_state} to send a status and reason along in the close frame that's being sent to the server.This callback and it's return types have intentionally been designed to be similiar to those of GenServer.handle_call/3, with the exception of the hibernate options, which is intentional.","ref":"Wumpex.Base.Websocket.html#c:handle_frame/2","title":"Wumpex.Base.Websocket.handle_frame/2","type":"callback"},{"doc":"Invoked when the websocket connects to the server.This method is invoked the first time the websocket connects. This method can be compared with the init/1 method of the GenServer, and is used to set the state of the process.It receives the options passed to start_linkThe returned value will be used as the process state.","ref":"Wumpex.Base.Websocket.html#c:on_connected/1","title":"Wumpex.Base.Websocket.on_connected/1","type":"callback"},{"doc":"Called when the socket connection closes.state is the current process state, and the return value if this function is a tuple with the first element being the new process state and the second the reconnect_strategy/0 to use.See reconnect_strategy/0 for more information.","ref":"Wumpex.Base.Websocket.html#c:on_disconnected/1","title":"Wumpex.Base.Websocket.on_disconnected/1","type":"callback"},{"doc":"Called when the socket is reconnected.This function takes the current state and returns the new state for the process.","ref":"Wumpex.Base.Websocket.html#c:on_reconnected/1","title":"Wumpex.Base.Websocket.on_reconnected/1","type":"callback"},{"doc":"Send one or more frames over the given websocket.websocket is the pid of the websocket, frame_or_frames is one (or a list of) frame/0.","ref":"Wumpex.Base.Websocket.html#send/2","title":"Wumpex.Base.Websocket.send/2","type":"function"},{"doc":"See GenServer.start_link/2.","ref":"Wumpex.Base.Websocket.html#start_link/2","title":"Wumpex.Base.Websocket.start_link/2","type":"function"},{"doc":"See GenServer.start_link/3.","ref":"Wumpex.Base.Websocket.html#start_link/3","title":"Wumpex.Base.Websocket.start_link/3","type":"function"},{"doc":"Represents a single websocket frame that can be sent or received over the websocket.There's three supported frames:{:text, message} - Used to send/receive textual data.{:binary, message} - Used to send/receive binary data (like ETF).:close or {:close, status, reason} - Signals that the websocket will be closed (to the receiving side), optionall you can pass in a status code and a reason.:ping and :pong frames are handled internally and not exposed.","ref":"Wumpex.Base.Websocket.html#t:frame/0","title":"Wumpex.Base.Websocket.frame/0","type":"type"},{"doc":"The options that are required to be passed to the websocket on startup.host is the hostname (ex: &quot;gateway.discord.gg&quot;), port is the port to connect to (usually 80 for unencrypted and 443 for encrypted connections), path is the path to which the websocket will connect (ex: &quot;/?v=8&quot;) and can (but doesn't have to) contain a query string and finally timeout is a timeout/0 used to determine how long to wait for connecting and upgrading.All options are required to be passed in.","ref":"Wumpex.Base.Websocket.html#t:options/0","title":"Wumpex.Base.Websocket.options/0","type":"type"},{"doc":"Reconnection strategy to use when returning from on_disconnected/1.There are currently 3 reconnection strategies supported::stop - No reconnection, this will gracefully shut down the server.:retry - Immediately attempt to reconnect.{:retry, delay} - Wait for delay milliseconds, then attempt to reconnect.Note that when using the delayed reconnect, the server will block and not process any messages until reconnection is complete. This is done to prevent receiving messages in the server when it is in a disconnected state.","ref":"Wumpex.Base.Websocket.html#t:reconnect_strategy/0","title":"Wumpex.Base.Websocket.reconnect_strategy/0","type":"type"},{"doc":"Handles incoming events from the gateway.This module handles the raw incoming events from the gateway's Wumpex.Base.Websocket. The messages are decoded, events that are not specific to a guild, such as HELLO, IDENTIFY, INVALID_SESSION etc are handled inline. Events specific to a guild (MESSAGE_CREATE, ...) are passed on to the process group for that guild.","ref":"Wumpex.Gateway.html","title":"Wumpex.Gateway","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Gateway.html#child_spec/1","title":"Wumpex.Gateway.child_spec/1","type":"function"},{"doc":"The dispatch event is called for all incoming events from the Discord gateway.The Wumpex.Gateway.Worker tries to handle any non-specific event inline, maintains the sequence state and handles resumes. Unknown events are simply discarded and a warning is logged.","ref":"Wumpex.Gateway.html#dispatch/2","title":"Wumpex.Gateway.dispatch/2","type":"function"},{"doc":"Dispatches an event on the gateway.This method will handle rate limiting, encoding of the message etc. Note that there's no validation on what's being sent, so be careful invoking this method.Invalid messages will cause Discord to close the gateway.","ref":"Wumpex.Gateway.html#send_opcode/2","title":"Wumpex.Gateway.send_opcode/2","type":"function"},{"doc":"Subscribes the current process to events from the given gateway.Events will be sent in the form of {:event, %Wumpex.Gateway.Event{}}.","ref":"Wumpex.Gateway.html#subscribe/1","title":"Wumpex.Gateway.subscribe/1","type":"function"},{"doc":"Subscribes the given processes to events from the given gateway.Events will be sent in the form of {:event, %Wumpex.Gateway.Event{}}.","ref":"Wumpex.Gateway.html#subscribe/2","title":"Wumpex.Gateway.subscribe/2","type":"function"},{"doc":"Unsubscribes the current process of events from the given gateway.","ref":"Wumpex.Gateway.html#unsubscribe/1","title":"Wumpex.Gateway.unsubscribe/1","type":"function"},{"doc":"Unsubscribes the given processes of events from the given gateway.","ref":"Wumpex.Gateway.html#unsubscribe/2","title":"Wumpex.Gateway.unsubscribe/2","type":"function"},{"doc":"Gets the server name of the Wumpex.Gateway process for a given shard. You can use this to get the pid of the gateway, or to send opcodes to it.# The shard (represented as a tuple). {0, 1} # Get the server name. |&gt; Wumpex.Gateway.via() # Dispatch an opcode to it. |&gt; Wumpex.Gateway.send_opcode(%{&quot;op&quot; =&gt; 1})","ref":"Wumpex.Gateway.html#via/1","title":"Wumpex.Gateway.via/1","type":"function"},{"doc":"","ref":"Wumpex.Gateway.html#t:frame_or_frames/0","title":"Wumpex.Gateway.frame_or_frames/0","type":"type"},{"doc":"The options that can be passed into start_link/1 and init/1.Contains the following fields::token - The bot token:shard - the identifier for this shard.:intents - The Wumpex.Gateway.Intents.t/0 struct containing intent information.:handlers - The handlers for this gateway's events.","ref":"Wumpex.Gateway.html#t:options/0","title":"Wumpex.Gateway.options/0","type":"type"},{"doc":"The state of the Wumpex.Gateway.Worker module.:token - The bot token to authenticate against Discord.:ack - Whether or not a heartbeat ACK has been received.:sequence - The ID of the last received event.:session_id - Session token, can be used to resume an interrupted session.:shard - the identifier for this shard.:intents - The intents information (calculated from Wumpex.Gateway.Intents.to_integer/1).","ref":"Wumpex.Gateway.html#t:state/0","title":"Wumpex.Gateway.state/0","type":"type"},{"doc":"Handles state tracking as described in the official Discord documentation.This is the second stage in the event processing pipeline, right after Wumpex.Gateway.EventProducer. Once an event is properly handled and the state is up to date, the event will be dispatched to all the listeners.","ref":"Wumpex.Gateway.Caching.html","title":"Wumpex.Gateway.Caching","type":"module"},{"doc":"Represents the options to be passed to start_link/1.Contains the following fields::producer - The pid/0 of the producer to subscribe to.","ref":"Wumpex.Gateway.Caching.html#t:options/0","title":"Wumpex.Gateway.Caching.options/0","type":"type"},{"doc":"Handles starting new consumers for the event processing stages.The start_consumer/2 method handles starting both Wumpex.Gateway.Consumers.EventConsumer as well as Wumpex.Gateway.Consumers.GuildsConsumer listeners.","ref":"Wumpex.Gateway.Consumers.html","title":"Wumpex.Gateway.Consumers","type":"module"},{"doc":"Starts a new consumer subscribed to the given producer.Depending on the given handler_options/0 either a event consumer or a guilds consumer will be started.","ref":"Wumpex.Gateway.Consumers.html#start_consumer/2","title":"Wumpex.Gateway.Consumers.start_consumer/2","type":"function"},{"doc":"Represents the configuration for an event handler.An event handler subscribes to events on the gateway, the :filter option can be used to subscribe to a limited number of events. The :guild option can be used to have an instance of the handler for each guild specific event.Contains the following fields::module - The module that will receive the incoming events.:filter - (optional) A function that takes in an event and returns true or false whether to accept this event or not:guild - (optional) If set to true this handler will be instantiated for each guild and receive events for a specific guild.:initial - (optional) A list of events that will be simulated on the handler upon startup.","ref":"Wumpex.Gateway.Consumers.html#t:handler_options/0","title":"Wumpex.Gateway.Consumers.handler_options/0","type":"type"},{"doc":"Receives events from a Wumpex.Gateway.The EventConsumer provides a convenience layer for subscribing to events from the event processing stages (see Wumpex.Gateway.EventProducer and Wumpex.Gateway.Caching). It implements GenStage as a :consumer and handles subscribing to the producer. It also takes care of filtering incoming events (through the :guild and :selector option) and allows specifying :initial events to replay when the listener starts up.EventConsumers are generally started using Wumpex.Gateway.Consumers.start_consumer/2, but you can start one directly by calling start_link/1.","ref":"Wumpex.Gateway.Consumers.EventConsumer.html","title":"Wumpex.Gateway.Consumers.EventConsumer","type":"module"},{"doc":"Start a new EventConsumer linked to the current process.","ref":"Wumpex.Gateway.Consumers.EventConsumer.html#start_link/1","title":"Wumpex.Gateway.Consumers.EventConsumer.start_link/1","type":"function"},{"doc":"Represents the options that have to be passed into start_link/1.Contains the following fields::producer - The producer to which the EventConsumer should subscribe to.:guild - If not nil, all incoming events will be filtered to only include events from this guild.:handler - Describes the handler for incoming events.:module - The module that will receive incoming events.:selector - If not nil, a function that receives an event and returns true or false to indicate if the event should be processed.:initial - If not nil, a list of events that will be replayed on the handler upon startup.","ref":"Wumpex.Gateway.Consumers.EventConsumer.html#t:options/0","title":"Wumpex.Gateway.Consumers.EventConsumer.options/0","type":"type"},{"doc":"Represents the process state.Contains the following fields::handler - The module to which incoming events will be dispatched.:handler_state - The state of the :handler module, generated from the :handler module's init function.","ref":"Wumpex.Gateway.Consumers.EventConsumer.html#t:state/0","title":"Wumpex.Gateway.Consumers.EventConsumer.state/0","type":"type"},{"doc":"A specialized event listener that checks for new guilds.Like Wumpex.Gateway.Consumers.EventConsumer this module subscribes to Wumpex.Gateway.Caching and listens for incoming events. The main difference is that instead of forwarding incoming events to a handler, it starts a new EventConsumer scoped to a guild whenever a new guild becomes available.This allows specifying a handler that should be instantiated for each guild that becomes available.","ref":"Wumpex.Gateway.Consumers.GuildsConsumer.html","title":"Wumpex.Gateway.Consumers.GuildsConsumer","type":"module"},{"doc":"Start a new GuildsConsumer linked to the current process.","ref":"Wumpex.Gateway.Consumers.GuildsConsumer.html#start_link/1","title":"Wumpex.Gateway.Consumers.GuildsConsumer.start_link/1","type":"function"},{"doc":"Represents the handler options for a handler that will be instantiated for each guild that becomes available.Contains the following fields::module - The module to which events of a guild will be sent.:selector - If not nil, a selector function to filter incoming events (see Wumpex.Gateway.Consumers.EventConsumer.options/0).","ref":"Wumpex.Gateway.Consumers.GuildsConsumer.html#t:guild_handler/0","title":"Wumpex.Gateway.Consumers.GuildsConsumer.guild_handler/0","type":"type"},{"doc":"Represents the options that can be passed into start_link/1.Contains the following fields::producer - The producer to which the GuildsConsumer should subscribe to.:guild_handler - The guild_handler/0 to instantiate for each guild.","ref":"Wumpex.Gateway.Consumers.GuildsConsumer.html#t:options/0","title":"Wumpex.Gateway.Consumers.GuildsConsumer.options/0","type":"type"},{"doc":"Represents the process state.Contains the following fields::guild_handler - The guild_handler/0 to instantiate for each guild.:producer - The producer to which the EventConsumer should subscribe to.","ref":"Wumpex.Gateway.Consumers.GuildsConsumer.html#t:state/0","title":"Wumpex.Gateway.Consumers.GuildsConsumer.state/0","type":"type"},{"doc":"Represents a single event dispatched from the Wumpex.Gateway.","ref":"Wumpex.Gateway.Event.html","title":"Wumpex.Gateway.Event","type":"module"},{"doc":"Get the guild ID of a given event.If the given event is not for a specific guild, this function will return nil.","ref":"Wumpex.Gateway.Event.html#guild/1","title":"Wumpex.Gateway.Event.guild/1","type":"function"},{"doc":"Represents an event that will be dispatched from the gateway to consumers.Contains the following fields::shard - A Wumpex.shard/0 representing the shard from which the event originates.:name - An atom with the name of the dispatched event.:payload - The event payload in the form of a map.:sequence - The sequence number of the event, can be used to track the same event across handlers.","ref":"Wumpex.Gateway.Event.html#t:t/0","title":"Wumpex.Gateway.Event.t/0","type":"type"},{"doc":"The first stage in processing events received from the Wumpex.Gateway.This module implements GenStage as a :producer and handles collecting events from the Wumpex.Gateway and buffering them if needed. Whenever consumers (event listeners) are ready to process events the EventProducer will dispatch them to the listeners.Events are not directly dispatched to event consumers, they are first sent to the Wumpex.Gateway.Caching layer to keep the state in sync.","ref":"Wumpex.Gateway.EventProducer.html","title":"Wumpex.Gateway.EventProducer","type":"module"},{"doc":"The state of the producer.The first element of the tuple is an Erlang queue, the second item is an integer representing the pending demand.","ref":"Wumpex.Gateway.EventProducer.html#t:state/0","title":"Wumpex.Gateway.EventProducer.state/0","type":"type"},{"doc":"Contains method for representing and working with Gateway intents.","ref":"Wumpex.Gateway.Intents.html","title":"Wumpex.Gateway.Intents","type":"module"},{"doc":"Checks if this Intents struct contains privileged intents. Read more about privileged intents in the official Discord documentation.iex&gt; Wumpex.Gateway.Intents.privileged?(%Wumpex.Gateway.Intents{guilds: true}) false iex&gt; Wumpex.Gateway.Intents.privileged?(%Wumpex.Gateway.Intents{guild_members: true}) true","ref":"Wumpex.Gateway.Intents.html#privileged?/1","title":"Wumpex.Gateway.Intents.privileged?/1","type":"function"},{"doc":"Transforms an Intents struct into the numerical representation.iex&gt; Wumpex.Gateway.Intents.to_integer(%Wumpex.Gateway.Intents{guilds: true}) 1 iex&gt; Wumpex.Gateway.Intents.to_integer(%Wumpex.Gateway.Intents{guilds: true, guild_messages: true}) 513","ref":"Wumpex.Gateway.Intents.html#to_integer/1","title":"Wumpex.Gateway.Intents.to_integer/1","type":"function"},{"doc":"Represents all possible intents and whether or not they should be enabled.The full list of Discord intents can be found in the official Discord documentation.","ref":"Wumpex.Gateway.Intents.html#t:t/0","title":"Wumpex.Gateway.Intents.t/0","type":"type"},{"doc":"Provides methods for generating opcodes.See the official documentation for a full list.","ref":"Wumpex.Gateway.Opcodes.html","title":"Wumpex.Gateway.Opcodes","type":"module"},{"doc":"Generates a HEARTBEAT opcode.iex&gt; Wumpex.Gateway.Opcodes.heartbeat(nil) %{&quot;op&quot; =&gt; 1, &quot;d&quot; =&gt; nil} iex&gt; Wumpex.Gateway.Opcodes.heartbeat(100) %{&quot;op&quot; =&gt; 1, &quot;d&quot; =&gt; 100}See the official documentation.","ref":"Wumpex.Gateway.Opcodes.html#heartbeat/1","title":"Wumpex.Gateway.Opcodes.heartbeat/1","type":"function"},{"doc":"Generate an IDENTIFY opcode.If you don't specify which intents you wish to use it will use 32767 by default, which uses ALL intents. Since version 8 this requires you to enable privileged gateway intents in the settings of your bot.iex&gt; Wumpex.Gateway.Opcodes.identify(&quot;test&quot;, {0, 1}) %{ &quot;op&quot; =&gt; 2, &quot;d&quot; =&gt; %{ &quot;token&quot; =&gt; &quot;test&quot;, &quot;shard&quot; =&gt; [0, 1], &quot;intents&quot; =&gt; 32_767, &quot;properties&quot; =&gt; %{ &quot;$os&quot; =&gt; :linux, &quot;$browser&quot; =&gt; &quot;wumpex&quot;, &quot;$device&quot; =&gt; &quot;wumpex&quot; } } } iex&gt; Wumpex.Gateway.Opcodes.identify(&quot;test&quot;, {1, 2}, 513) %{ &quot;op&quot; =&gt; 2, &quot;d&quot; =&gt; %{ &quot;token&quot; =&gt; &quot;test&quot;, &quot;shard&quot; =&gt; [1, 2], &quot;intents&quot; =&gt; 513, &quot;properties&quot; =&gt; %{ &quot;$os&quot; =&gt; :linux, &quot;$browser&quot; =&gt; &quot;wumpex&quot;, &quot;$device&quot; =&gt; &quot;wumpex&quot; } } }See the official documentation","ref":"Wumpex.Gateway.Opcodes.html#identify/3","title":"Wumpex.Gateway.Opcodes.identify/3","type":"function"},{"doc":"Generate a RESUME opcode.iex&gt; Wumpex.Gateway.Opcodes.resume(&quot;test&quot;, 20, &quot;session&quot;) %{ &quot;op&quot; =&gt; 6, &quot;d&quot; =&gt; %{ &quot;token&quot; =&gt; &quot;test&quot;, &quot;session_id&quot; =&gt; &quot;session&quot;, &quot;seq&quot; =&gt; 20 } }See the official documentation","ref":"Wumpex.Gateway.Opcodes.html#resume/3","title":"Wumpex.Gateway.Opcodes.resume/3","type":"function"},{"doc":"","ref":"Wumpex.Gateway.Opcodes.html#voice_state_update/3","title":"Wumpex.Gateway.Opcodes.voice_state_update/3","type":"function"},{"doc":"Represents a generic OPCODE response.Opcodes usually have a top level &quot;op&quot; field which contains the numerical ID and a &quot;d&quot; field which contains the payload.","ref":"Wumpex.Gateway.Opcodes.html#t:opcode/0","title":"Wumpex.Gateway.Opcodes.opcode/0","type":"type"},{"doc":"Contains functionality for connecting and interacting with voice connections.","ref":"Wumpex.Voice.html","title":"Wumpex.Voice","type":"module"},{"doc":"","ref":"Wumpex.Voice.html#change_channel/2","title":"Wumpex.Voice.change_channel/2","type":"function"},{"doc":"Connects to a given voice channel.Returns {:ok, pid} where pid is the pid/0 of the voice connection. If there's already a voice connection active for the given guild, the bot will change to the given channel (using change_channel/2) and return {:ok, pid} as if started (allowing you to match on the same pattern for all success cases).Takes the following parameters::shard - The shard on which the :guild is running.:guild - The ID of the guild the given channel is in.:channel - The ID of the channel to connect to.","ref":"Wumpex.Voice.html#connect/3","title":"Wumpex.Voice.connect/3","type":"function"},{"doc":"Disconnects the given voice connection from it's currently connected channel.","ref":"Wumpex.Voice.html#disconnect/1","title":"Wumpex.Voice.disconnect/1","type":"function"},{"doc":"Get the server name for the given guild.","ref":"Wumpex.Voice.html#for/1","title":"Wumpex.Voice.for/1","type":"function"},{"doc":"Requests to play the given enumerable/stream on the given voice connection. The stream parameter can be both a list (or other enumerable) or a Stream.This method will return a reference/0 that refers to this audio request. If you want to cancel the playback (either while it's playing or when it's still queued), you can use this reference to identity the playback request.","ref":"Wumpex.Voice.html#play/2","title":"Wumpex.Voice.play/2","type":"function"},{"doc":"Set the voice state for the given voice connection. This involves (un)muting and (un)deafening.The :options parameter is a list that takes either :mute or :deafen as it's members. Passing in either of these two will cause the bot to mute or deafen (respectively).","ref":"Wumpex.Voice.html#set_state/2","title":"Wumpex.Voice.set_state/2","type":"function"},{"doc":"Handles incoming events from the voice gateway. The voice gateway is bound to a specific voice connection of a guild (see Wumpex.Voice.Manager).This module handles the raw incoming events from the gateway's Wumpex.Base.Websocket. The messages are decoded and handled approperiately.","ref":"Wumpex.Voice.Gateway.html","title":"Wumpex.Voice.Gateway","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Voice.Gateway.html#child_spec/1","title":"Wumpex.Voice.Gateway.child_spec/1","type":"function"},{"doc":"Asks the voice gateway to dispatch the SELECT PROTOCOL opcode with the given information.","ref":"Wumpex.Voice.Gateway.html#select_protocol/4","title":"Wumpex.Voice.Gateway.select_protocol/4","type":"function"},{"doc":"","ref":"Wumpex.Voice.Gateway.html#t:frame_or_frames/0","title":"Wumpex.Voice.Gateway.frame_or_frames/0","type":"type"},{"doc":"The options that can be passed into start_link/1 and init/1.Contains the following fields::endpoint - The endpoint string received from the :VOICE_SERVER_UPDATE.:token - The token received from the :VOICE_SERVER_UPDATE.:session - The session token received from the :VOICE_STATE_UPDATE.:guild_id - The guild ID to connect to.:user_id - The ID of the bot.:controller - The pid/0 of the controlling process (will receive the UDP information).","ref":"Wumpex.Voice.Gateway.html#t:options/0","title":"Wumpex.Voice.Gateway.options/0","type":"type"},{"doc":"Represents the process state.Contains the following fields::nonce - The last nonce sent in the heartbeats.:controller - The pid/0 of the controlling process (will receive the UDP information).:server - The guild we're connected to:session - The session token received from the :VOICE_STATE_UPDATE, used for resuming the connection.:token - The token received from the :VOICE_SERVER_UPDATE, used for resuming the connection.","ref":"Wumpex.Voice.Gateway.html#t:state/0","title":"Wumpex.Voice.Gateway.state/0","type":"type"},{"doc":"Represents a voice connection and abstracts the Wumpex.Voice.Gateway, Wumpex.Voice.Udp connection and the Wumpex.Voice.Player process.This module coordinates actions that require interaction across the different processes and/or modules. For example, sending audio data requires sending an opcode over the voice gateway and then sending encrypted audio data over the UDP socket.","ref":"Wumpex.Voice.Manager.html","title":"Wumpex.Voice.Manager","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Voice.Manager.html#child_spec/1","title":"Wumpex.Voice.Manager.child_spec/1","type":"function"},{"doc":"Gets the server name of the Wumpex.Voice.Manager process for a given guild. You can use this to get the pid of the connection or to send commands to it.See also Wumpex.Gateway.via/1 for usage information.","ref":"Wumpex.Voice.Manager.html#via/1","title":"Wumpex.Voice.Manager.via/1","type":"function"},{"doc":"The options that can be passed into start_link/1 and init/1.Contains the following fields::shard - The shard on which to listen for the (regular) gateway events and send outgoing events.:guild - The guild to connect to.:channel - The (voice) channel to connect to.","ref":"Wumpex.Voice.Manager.html#t:options/0","title":"Wumpex.Voice.Manager.options/0","type":"type"},{"doc":"Represents the process state.Contains the following fields::gateway - The pid/0 of the Wumpex.Voice.Gateway process.:udp - The pid/0 of the Wumpex.Voice.Udp process.:player - The pid/0 of the Wumpex.Voice.Player process.:ssrc - The SSRC for this voice connection.:shard - The shard on which to listen for the (regular) gateway events and send outgoing events.:guild - The guild we're connected to.:channel - The voice channel we're connected to.","ref":"Wumpex.Voice.Manager.html#t:state/0","title":"Wumpex.Voice.Manager.state/0","type":"type"},{"doc":"Provides methods for generating opcodes.See the [official documentation](https://discord.com/developers/docs/topics/opcodes-and-status-codes#voice.","ref":"Wumpex.Voice.Opcodes.html","title":"Wumpex.Voice.Opcodes","type":"module"},{"doc":"Generates a HEARTBEAT opcode.iex&gt; Wumpex.Voice.Opcodes.heartbeat(nil) %{&quot;op&quot; =&gt; 3, &quot;d&quot; =&gt; nil} iex&gt; Wumpex.Voice.Opcodes.heartbeat(100) %{&quot;op&quot; =&gt; 3, &quot;d&quot; =&gt; 100}See the official documentation.","ref":"Wumpex.Voice.Opcodes.html#heartbeat/1","title":"Wumpex.Voice.Opcodes.heartbeat/1","type":"function"},{"doc":"Generates an IDENTIFY opcode.iex&gt; Wumpex.Voice.Opcodes.identify(&quot;server&quot;, &quot;user&quot;, &quot;session&quot;, &quot;token&quot;) %{&quot;op&quot; =&gt; 0, &quot;d&quot; =&gt; %{&quot;server_id&quot; =&gt; &quot;server&quot;, &quot;user_id&quot; =&gt; &quot;user&quot;, &quot;session_id&quot; =&gt; &quot;session&quot;, &quot;token&quot; =&gt; &quot;token&quot;}}See the official documentation.","ref":"Wumpex.Voice.Opcodes.html#identify/4","title":"Wumpex.Voice.Opcodes.identify/4","type":"function"},{"doc":"Generates a RESUME opcode.iex&gt; Wumpex.Voice.Opcodes.resume(&quot;server&quot;, &quot;session&quot;, &quot;token&quot;) %{&quot;op&quot; =&gt; 7, &quot;d&quot; =&gt; %{&quot;server_id&quot; =&gt; &quot;server&quot;, &quot;session_id&quot; =&gt; &quot;session&quot;, &quot;token&quot; =&gt; &quot;token&quot;}}See the official documentation.","ref":"Wumpex.Voice.Opcodes.html#resume/3","title":"Wumpex.Voice.Opcodes.resume/3","type":"function"},{"doc":"generates a SELECT PROTOCOL opcode.iex&gt; Wumpex.Voice.Opcodes.select_protocol(&quot;ip&quot;, 123, &quot;mode&quot;) %{&quot;op&quot; =&gt; 1, &quot;d&quot; =&gt; %{&quot;protocol&quot; =&gt; &quot;udp&quot;, &quot;data&quot; =&gt; %{&quot;address&quot; =&gt; &quot;ip&quot;, &quot;port&quot; =&gt; 123, &quot;mode&quot; =&gt; &quot;mode&quot;}}}","ref":"Wumpex.Voice.Opcodes.html#select_protocol/3","title":"Wumpex.Voice.Opcodes.select_protocol/3","type":"function"},{"doc":"Generates a SPEAKING opcode.iex&gt; Wumpex.Voice.Opcodes.speaking(0, []) %{&quot;op&quot; =&gt; 5, &quot;d&quot; =&gt; %{&quot;speaking&quot; =&gt; 0, &quot;delay&quot; =&gt; 0, &quot;ssrc&quot; =&gt; 0}} iex&gt; Wumpex.Voice.Opcodes.speaking(0, [:microphone]) %{&quot;op&quot; =&gt; 5, &quot;d&quot; =&gt; %{&quot;speaking&quot; =&gt; 1, &quot;delay&quot; =&gt; 0, &quot;ssrc&quot; =&gt; 0}} iex&gt; Wumpex.Voice.Opcodes.speaking(0, [:microphone, :priority]) %{&quot;op&quot; =&gt; 5, &quot;d&quot; =&gt; %{&quot;speaking&quot; =&gt; 5, &quot;delay&quot; =&gt; 0, &quot;ssrc&quot; =&gt; 0}} iex&gt; Wumpex.Voice.Opcodes.speaking(0, [:microphone, :priority, :soundshare]) %{&quot;op&quot; =&gt; 5, &quot;d&quot; =&gt; %{&quot;speaking&quot; =&gt; 7, &quot;delay&quot; =&gt; 0, &quot;ssrc&quot; =&gt; 0}}","ref":"Wumpex.Voice.Opcodes.html#speaking/2","title":"Wumpex.Voice.Opcodes.speaking/2","type":"function"},{"doc":"Represents a generic OPCODE response.Opcodes usually have a top level &quot;op&quot; field which contains the numerical ID and a &quot;d&quot; field which contains the payload.","ref":"Wumpex.Voice.Opcodes.html#t:opcode/0","title":"Wumpex.Voice.Opcodes.opcode/0","type":"type"},{"doc":"The Player module is responsible for encoding and sending audio data to Discord.Currently only supports playing a single sound, but queueing support is planned to be added.","ref":"Wumpex.Voice.Player.html","title":"Wumpex.Voice.Player","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Voice.Player.html#child_spec/1","title":"Wumpex.Voice.Player.child_spec/1","type":"function"},{"doc":"The options that can be passed into start_link/1 and init/1.Contains the following fields::secret_key - The key used when encrypting outgoing packets.:ssrc - The SSRC for this voice connection.:udp - The pid/0 of the Wumpex.Voice.Udp process to request a socket from.","ref":"Wumpex.Voice.Player.html#t:options/0","title":"Wumpex.Voice.Player.options/0","type":"type"},{"doc":"Represents the process state.Contains the following fields::ssrc - The SSRC for this voice connection.:secret_key - The key used when encrypting outgoing packets.:socket - The Wumpex.Voice.Udp.socket/0 used for sending data.:current - The currently being played audio data.:sequence - The sequence used when building RTP header data.:time - The time used when building RTP header data.:queue - A list of all the audio fragments that are waiting to be played.","ref":"Wumpex.Voice.Player.html#t:state/0","title":"Wumpex.Voice.Player.state/0","type":"type"},{"doc":"Contains methods for generating RTP packets.Implementation based on the official documentation.","ref":"Wumpex.Voice.Rtp.html","title":"Wumpex.Voice.Rtp","type":"module"},{"doc":"Encodes the given data as an encrypted RTP packet.","ref":"Wumpex.Voice.Rtp.html#encode/5","title":"Wumpex.Voice.Rtp.encode/5","type":"function"},{"doc":"Generates a &quot;silent&quot; frame.","ref":"Wumpex.Voice.Rtp.html#silence/0","title":"Wumpex.Voice.Rtp.silence/0","type":"function"},{"doc":"Handles the UDP connection required for voice connections.Contains the logic for sending and receiving data over the UDP socket.","ref":"Wumpex.Voice.Udp.html","title":"Wumpex.Voice.Udp","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Voice.Udp.html#child_spec/1","title":"Wumpex.Voice.Udp.child_spec/1","type":"function"},{"doc":"Send a packet over the socket.","ref":"Wumpex.Voice.Udp.html#send_packet/2","title":"Wumpex.Voice.Udp.send_packet/2","type":"function"},{"doc":"The options that can be passed into start_link/1 and init/1.Contains the following fields::ip - The IP address to connect to.:port - The port to connect to.:ssrc - The SSRC for this voice connection.:controller - The pid/0 of the Wumpex.Voice.Manager controlling this process (used for feeding setup data back).:ip_discovery? - Whether or not to execute IP discovery.","ref":"Wumpex.Voice.Udp.html#t:options/0","title":"Wumpex.Voice.Udp.options/0","type":"type"},{"doc":"Represents a socket that the UDP process can send to.","ref":"Wumpex.Voice.Udp.html#t:socket/0","title":"Wumpex.Voice.Udp.socket/0","type":"opaque"},{"doc":"Represents the process state.Contains the following fields::socket - The UDP socket.:remote - A tuple containing information where to send data to.:controller - The pid/0 of the Wumpex.Voice.Manager controlling this process (used for feeding setup data back).","ref":"Wumpex.Voice.Udp.html#t:state/0","title":"Wumpex.Voice.Udp.state/0","type":"type"},{"doc":"Keeps track of all voice connections by their name.This module uses Wumpex.Base.Ledger under the hood.","ref":"Wumpex.Voice.VoiceLedger.html","title":"Wumpex.Voice.VoiceLedger","type":"module"},{"doc":"Looks up the pid/0 with metadata for a given name. Returns nil if no entry could be found for the given name.iex&gt; MyLedger.register(&quot;some-process&quot;, self(), &quot;metadata&quot;) :yes iex&gt; MyLedger.lookup(&quot;some-process&quot;) {pid, &quot;metadata&quot;}See register/3 for setting metadata.","ref":"Wumpex.Voice.VoiceLedger.html#lookup/1","title":"Wumpex.Voice.VoiceLedger.lookup/1","type":"function"},{"doc":"Register a given pid/0 under the given :name in the registry, optionally passing in metadata.","ref":"Wumpex.Voice.VoiceLedger.html#register/3","title":"Wumpex.Voice.VoiceLedger.register/3","type":"function"},{"doc":"Base module for so called &quot;resources&quot; (as the discord documentation refers to them).Resources are mainly used in the context of the HTTP API, but the gateway shares a lot of these types (so we use the same there).","ref":"Wumpex.Resource.html","title":"Wumpex.Resource","type":"module"},{"doc":"Attempts to convert a given string into an (existing!) atom/0.This uses String.to_existing_atom/1 under the hood, so passing a non-existing atom will cause an ArgumentErrorExamplesiex&gt; Wumpex.Resource.to_atom!(&quot;known&quot;) :known iex&gt; Wumpex.Resource.to_atom!(&quot;cannot-exist&quot;) ** (ArgumentError) argument error","ref":"Wumpex.Resource.html#to_atom!/1","title":"Wumpex.Resource.to_atom!/1","type":"function"},{"doc":"Transforms a map with strings for keys into a map with atoms for keys.Exampleiex&gt; Wumpex.Resource.to_atomized_map(%{&quot;hello&quot; =&gt; &quot;world&quot;}) %{hello: &quot;world&quot;}","ref":"Wumpex.Resource.html#to_atomized_map/1","title":"Wumpex.Resource.to_atomized_map/1","type":"function"},{"doc":"Attempts to convert a given string into a DateTime.t/0 instance.Examplesiex&gt; Wumpex.Resource.to_datetime(&quot;2017-07-11T17:27:07.299000+00:00&quot;) ~U[2017-07-11 17:27:07.299000Z] iex&gt; Wumpex.Resource.to_datetime(0) ~U[1970-01-01 00:00:00.000Z] iex&gt; Wumpex.Resource.to_datetime(~U[2020-07-11 17:27:07.299000Z]) ~U[2020-07-11 17:27:07.299000Z]","ref":"Wumpex.Resource.html#to_datetime/1","title":"Wumpex.Resource.to_datetime/1","type":"function"},{"doc":"Maps a list of resources to the given module struct.Exampleiex&gt; Wumpex.Resource.to_structs([%{}], Wumpex.Resource.Role) [%Wumpex.Resource.Role{}]","ref":"Wumpex.Resource.html#to_structs/2","title":"Wumpex.Resource.to_structs/2","type":"function"},{"doc":"Represents a uniquely identifiable descriptor, guaranteed to be unique across all of Discord.See the official Discord documentation.","ref":"Wumpex.Resource.html#t:snowflake/0","title":"Wumpex.Resource.snowflake/0","type":"type"},{"doc":"Represents the activity of a presence update in Discord.See the official Discord documentation.","ref":"Wumpex.Resource.Activity.html","title":"Wumpex.Resource.Activity","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.to_struct(%{}) %Wumpex.Resource.Activity{ application_id: nil, assets: nil, created_at: nil, details: nil, emoji: nil, flags: nil, instance: nil, name: nil, party: nil, secrets: nil, state: nil, timestamps: nil, type: nil, url: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.to_struct(%{&quot;name&quot; =&gt; &quot;the name of the activity&quot;}) %Wumpex.Resource.Activity{ name: &quot;the name of the activity&quot; }","ref":"Wumpex.Resource.Activity.html#to_struct/1","title":"Wumpex.Resource.Activity.to_struct/1","type":"function"},{"doc":"Represents the type of activity.Can contain the following values:IDNameFormatExample0GamePlaying {name}&quot;Playing Rocket League&quot;1StreamingStreaming {details}&quot;Streaming Rocket League&quot;2ListeningListening to {name}&quot;Listening to Spotify&quot;4Custom{emoji} {name}&quot;:smiley: I am cool&quot;","ref":"Wumpex.Resource.Activity.html#t:activity_type/0","title":"Wumpex.Resource.Activity.activity_type/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::name - the activity's name:type - the activity_type/0 activity type.:url - stream URL, is validated when :type is 1.:created_at - unix timestamp of when the activity was added to the user's session.:timestamps - unix t:TWumpex.Resource.Timestamps.t/0 for start and end of the game.:application_id - application id for the game.:details - what the player is currently doing.:state - the user's current party status.:emoji - the emoji used for a custom status.:party - information for the current party of the player.:assets - images for the presence and their hover texts.:secrets - secrets for Rich Presence joining and spectating.:instance - whether or not the activity is an instance game session.:flags - Wumpex.Resource.Activity.Flags.t/0 describes what the payload includes.","ref":"Wumpex.Resource.Activity.html#t:t/0","title":"Wumpex.Resource.Activity.t/0","type":"type"},{"doc":"Images for the presence and their hover texts.See the official Discord documentation.","ref":"Wumpex.Resource.Activity.Assets.html","title":"Wumpex.Resource.Activity.Assets","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Assets.to_struct(%{}) %Wumpex.Resource.Activity.Assets{ large_image: nil, large_text: nil, small_image: nil, small_text: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Assets.to_struct(%{&quot;large_image&quot; =&gt; &quot;snowflake-here&quot;}) %Wumpex.Resource.Activity.Assets{ large_image: &quot;snowflake-here&quot; }","ref":"Wumpex.Resource.Activity.Assets.html#to_struct/1","title":"Wumpex.Resource.Activity.Assets.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::large_image - the id for a large asset of the activity, usually a Wumpex.Resource.snowflake/0.:large_text - text displayed when hovering over the large image of the activity.:small_image - the id for a small asset of the activity, usually a Wumpex.Resource.snowflake/0.:small_text - text displayed when hovering over the small image of the activity.","ref":"Wumpex.Resource.Activity.Assets.html#t:t/0","title":"Wumpex.Resource.Activity.Assets.t/0","type":"type"},{"doc":"The emoji used for a custom status","ref":"Wumpex.Resource.Activity.Emoji.html","title":"Wumpex.Resource.Activity.Emoji","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Emoji.to_struct(%{}) %Wumpex.Resource.Activity.Emoji{ name: nil, id: nil, animated: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Emoji.to_struct(%{&quot;name&quot; =&gt; &quot;emoji-name&quot;}) %Wumpex.Resource.Activity.Emoji{ name: &quot;emoji-name&quot; }","ref":"Wumpex.Resource.Activity.Emoji.html#to_struct/1","title":"Wumpex.Resource.Activity.Emoji.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::name - the name of the emoji.:id - the id of the emoji.:animated - whether this emoji is animated.","ref":"Wumpex.Resource.Activity.Emoji.html#t:t/0","title":"Wumpex.Resource.Activity.Emoji.t/0","type":"type"},{"doc":"activity flags ORd together, describes what the payload includes","ref":"Wumpex.Resource.Activity.Flags.html","title":"Wumpex.Resource.Activity.Flags","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Flags.to_struct(1) %Wumpex.Resource.Activity.Flags{ instance: true, join: false, spectate: false, join_request: false, sync: false, play: false }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Flags.to_struct(8) %Wumpex.Resource.Activity.Flags{ instance: false, join: false, spectate: false, join_request: true, sync: false, play: false }","ref":"Wumpex.Resource.Activity.Flags.html#to_struct/1","title":"Wumpex.Resource.Activity.Flags.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::instance - true if this flag was passed along.:join - true if this flag was passed along.:spectate - true if this flag was passed along.:join_request - true if this flag was passed along.:sync - true if this flag was passed along.:play - true if this flag was passed along.","ref":"Wumpex.Resource.Activity.Flags.html#t:t/0","title":"Wumpex.Resource.Activity.Flags.t/0","type":"type"},{"doc":"Information for the current party of the player.See the official Discord documentation.","ref":"Wumpex.Resource.Activity.Party.html","title":"Wumpex.Resource.Activity.Party","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Party.to_struct(%{}) %Wumpex.Resource.Activity.Party{ id: nil, size: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Party.to_struct(%{&quot;id&quot; =&gt; &quot;snowflake&quot;, &quot;size&quot; =&gt; [0, 0]}) %Wumpex.Resource.Activity.Party{ id: &quot;snowflake&quot;, size: {0, 0} }","ref":"Wumpex.Resource.Activity.Party.html#to_struct/1","title":"Wumpex.Resource.Activity.Party.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - the id of the party:size - used to show the party's current and maximum size","ref":"Wumpex.Resource.Activity.Party.html#t:t/0","title":"Wumpex.Resource.Activity.Party.t/0","type":"type"},{"doc":"Secrets for Wumpex.Resource.PresenceUpdate.t/0 joining and spectating.See the official Discord documentation.","ref":"Wumpex.Resource.Activity.Secrets.html","title":"Wumpex.Resource.Activity.Secrets","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Secrets.to_struct(%{}) %Wumpex.Resource.Activity.Secrets{ join: nil, spectate: nil, match: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Secrets.to_struct(%{&quot;join&quot; =&gt; &quot;join-secret&quot;, &quot;spectate&quot; =&gt; &quot;spectate-secret&quot;}) %Wumpex.Resource.Activity.Secrets{ join: &quot;join-secret&quot;, spectate: &quot;spectate-secret&quot;, match: nil }","ref":"Wumpex.Resource.Activity.Secrets.html#to_struct/1","title":"Wumpex.Resource.Activity.Secrets.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::join - the secret for joinoing a party.:spectate - the secret for spectating a game.:match - the secret for a specific instanced match.","ref":"Wumpex.Resource.Activity.Secrets.html#t:t/0","title":"Wumpex.Resource.Activity.Secrets.t/0","type":"type"},{"doc":"Unix timestamps for start and/or end of the game.See the official Discord documentation.","ref":"Wumpex.Resource.Activity.Timestamps.html","title":"Wumpex.Resource.Activity.Timestamps","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Activity.Timestamps.to_struct(%{}) %Wumpex.Resource.Activity.Timestamps{ start: nil, end: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Activity.Timestamps.to_struct(%{&quot;start&quot; =&gt; 1598091581660, &quot;end&quot; =&gt; 1598091604956}) %Wumpex.Resource.Activity.Timestamps{ start: ~U[2020-08-22 10:19:41.660Z], end: ~U[2020-08-22 10:20:04.956Z] }","ref":"Wumpex.Resource.Activity.Timestamps.html#to_struct/1","title":"Wumpex.Resource.Activity.Timestamps.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::start - DateTime of when the activity started.:end - DateTime of when the activity ends.","ref":"Wumpex.Resource.Activity.Timestamps.html#t:t/0","title":"Wumpex.Resource.Activity.Timestamps.t/0","type":"type"},{"doc":"Represents a file attached to a message.See the official Discord documentation.","ref":"Wumpex.Resource.Attachment.html","title":"Wumpex.Resource.Attachment","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Attachment.to_struct(%{}) %Wumpex.Resource.Attachment{ id: nil, filename: nil, size: nil, url: nil, proxy_url: nil, height: nil, width: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Attachment.to_struct(%{&quot;id&quot; =&gt; &quot;id&quot;, &quot;filename&quot; =&gt; &quot;file-name&quot;}) %Wumpex.Resource.Attachment{ id: &quot;id&quot;, filename: &quot;file-name&quot;, size: nil, url: nil, proxy_url: nil, height: nil, width: nil }","ref":"Wumpex.Resource.Attachment.html#to_struct/1","title":"Wumpex.Resource.Attachment.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The attachment ID.:filename - The name of the file attached.:size - The size of the file in bytes.:url - The URL of the file.:proxy_url - A proxied URL of the file.:height - The height of file (if an image).:width - The width of file (if an image).","ref":"Wumpex.Resource.Attachment.html#t:t/0","title":"Wumpex.Resource.Attachment.t/0","type":"type"},{"doc":"Represents a guild or DM channel within Discord.See the official Discord documentation.","ref":"Wumpex.Resource.Channel.html","title":"Wumpex.Resource.Channel","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Channel.to_struct(%{}) %Wumpex.Resource.Channel{ id: nil, type: nil, guild_id: nil, position: nil, permission_overwrites: nil, name: nil, topic: nil, nsfw: nil, last_message_id: nil, bitrate: nil, user_limit: nil, rate_limit_per_user: nil, recipients: nil, icon: nil, owner_id: nil, application_id: nil }","ref":"Wumpex.Resource.Channel.html#to_struct/1","title":"Wumpex.Resource.Channel.to_struct/1","type":"function"},{"doc":"the type of channel Can have the following values:0 (GUILD_TEXT) - A text channel withing a server.1 (DM) - A direct message between users.2 (GUILD_VOICE) - A voice channel within a server.3 (GROUP_DM) - A direct message between multiple users.4 (GUILD_CATEGORY) - An organizational category that contains up to 50 channels.5 (GUILD_NEWS) - A channel that users can follow and crosspost into their own server.6 (GUILD_STORE) - A channel in which game developers can sell their game on Discord.","ref":"Wumpex.Resource.Channel.html#t:channel_type/0","title":"Wumpex.Resource.Channel.channel_type/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the channel.:type - The channel_type/0 of the channel.:guild_id - The ID of the guild.:position - The sorting position of the channel.:permission_overwrites - Explicit permission overwrites for members and roles.:name - The name of the channel (2-100 characters).:topic - The channel topic (0-1024 characters).:nsfw - Whether the channel is NSFW.:last_message_id - The ID of the last message sent in this channel (may not point to an existing or valid message).:bitrate - The bitrate (in bits) of the voice channel.:user_limit - The user limit of the voice channel.:rate_limit_per_user - The amount of seconds a user has to wait before sending another message (between 0 and 21600); bots, users with the manage_messages or manage_channel are unaffected.:recipients a list of Wumpex.Resource.User that are the recipients of the DM.:icon The icon hash.:owner_id - The ID of the DM creator.:application_id - The application ID of the DM creator, if it's bot-created.:parent_id - ID of the parent category for a channel (each parent category can contain up to 50 channels).:last_pin_timestamp - When the last pinned message was pinned.","ref":"Wumpex.Resource.Channel.html#t:t/0","title":"Wumpex.Resource.Channel.t/0","type":"type"},{"doc":"Represents a set of overrides of permissions.See the official Discord documentation.","ref":"Wumpex.Resource.Channel.Overwrite.html","title":"Wumpex.Resource.Channel.Overwrite","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Channel.Overwrite.to_struct(%{}) %Wumpex.Resource.Channel.Overwrite{ id: nil, type: nil, allow: nil, deny: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Channel.Overwrite.to_struct(%{&quot;id&quot; =&gt; &quot;155117677105512449&quot;, &quot;type&quot; =&gt; &quot;role&quot;, &quot;allow&quot; =&gt; &quot;0&quot;, &quot;deny&quot; =&gt; &quot;0&quot;}) %Wumpex.Resource.Channel.Overwrite{ id: &quot;155117677105512449&quot;, type: &quot;role&quot;, allow: &quot;0&quot;, deny: &quot;0&quot; }","ref":"Wumpex.Resource.Channel.Overwrite.html#to_struct/1","title":"Wumpex.Resource.Channel.Overwrite.to_struct/1","type":"function"},{"doc":"","ref":"Wumpex.Resource.Channel.Overwrite.html#t:t/0","title":"Wumpex.Resource.Channel.Overwrite.t/0","type":"type"},{"doc":"The type of permission set. Can be either &quot;role&quot; or &quot;member&quot;.","ref":"Wumpex.Resource.Channel.Overwrite.html#t:type/0","title":"Wumpex.Resource.Channel.Overwrite.type/0","type":"type"},{"doc":"Represents a channel specifically mentioned in a message.See the official Discord documentation.","ref":"Wumpex.Resource.ChannelMention.html","title":"Wumpex.Resource.ChannelMention","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.ChannelMention.to_struct(%{}) %Wumpex.Resource.ChannelMention{ id: nil, guild_id: nil, type: nil, name: nil }","ref":"Wumpex.Resource.ChannelMention.html#to_struct/1","title":"Wumpex.Resource.ChannelMention.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the channel.:guild_id - The ID of the guild containing the channel.:type - The Wumpex.Resource.Channel.channel_type/0.:name - The name of the channel that's mentioned.","ref":"Wumpex.Resource.ChannelMention.html#t:t/0","title":"Wumpex.Resource.ChannelMention.t/0","type":"type"},{"doc":"Represents the status of a client on the three available platforms.Active sessions are indicated with an &quot;online&quot;, &quot;idle&quot;, or &quot;dnd&quot; string per platform. If a user is offline or invisible, the corresponding field is not present.See the official Discord documentation.","ref":"Wumpex.Resource.ClientStatus.html","title":"Wumpex.Resource.ClientStatus","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.ClientStatus.to_struct(%{}) %Wumpex.Resource.ClientStatus{ desktop: nil, mobile: nil, web: nil }","ref":"Wumpex.Resource.ClientStatus.html#to_struct/1","title":"Wumpex.Resource.ClientStatus.to_struct/1","type":"function"},{"doc":"Can be either &quot;idle&quot;, &quot;dnd&quot;, &quot;online&quot;, or &quot;offline&quot;","ref":"Wumpex.Resource.ClientStatus.html#t:status/0","title":"Wumpex.Resource.ClientStatus.status/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::desktop - The user's status set for an active desktop (Windows, Linux, Mac) application session.:mobile - The user's status set for an active mobile (iOS, Android) application session.:web - The user's status set for an active web (browser, bot account) application session.","ref":"Wumpex.Resource.ClientStatus.html#t:t/0","title":"Wumpex.Resource.ClientStatus.t/0","type":"type"},{"doc":"Represents embedded rich content.See the official Discord documentation.","ref":"Wumpex.Resource.Embed.html","title":"Wumpex.Resource.Embed","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.to_struct(%{}) %Wumpex.Resource.Embed{ title: nil, type: nil, description: nil, url: nil, timestamp: nil, color: nil, footer: nil, image: nil, thumbnail: nil, video: nil, provider: nil, author: nil, fields: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.to_struct(%{&quot;title&quot; =&gt; &quot;embed title&quot;}) %Wumpex.Resource.Embed{ title: &quot;embed title&quot;, type: nil, description: nil, url: nil, timestamp: nil, color: nil, footer: nil, image: nil, thumbnail: nil, video: nil, provider: nil, author: nil, fields: nil }","ref":"Wumpex.Resource.Embed.html#to_struct/1","title":"Wumpex.Resource.Embed.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::title - The title of the embed.:type - The type/0 of embed (soft deprecated).:description - The description of the embed.:url The URL of the embed.:timestamp The DateTime of the embed.:color - The colour code of the embed.:footer - The Wumpex.Resource.Embed.Footer of the embed.:image - The image of the embed.:thumbnail - The thumbnail information of the embed.:video The video information of the embed.:provider - The provider information of the embed.:author - The author information of the embed.:fields - The custom fields information of the embed.","ref":"Wumpex.Resource.Embed.html#t:t/0","title":"Wumpex.Resource.Embed.t/0","type":"type"},{"doc":"Represents the type of embed (always &quot;rich&quot; for webhook embeds).Can have the following values:rich generic embed rendered from embed attributesimage image embedvideo video embedgifv animated gif image embed rendered as a video embedarticle article embedlink linkd gif image embed rendered as a video embed","ref":"Wumpex.Resource.Embed.html#t:type/0","title":"Wumpex.Resource.Embed.type/0","type":"type"},{"doc":"Contains information about the author of the Wumpex.Resource.Embed.See the official Discord dcumentation.","ref":"Wumpex.Resource.Embed.Author.html","title":"Wumpex.Resource.Embed.Author","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Author.to_struct(%{}) %Wumpex.Resource.Embed.Author{ name: nil, url: nil, icon_url: nil, proxy_icon_url: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Author.to_struct(%{&quot;name&quot; =&gt; &quot;dealloc&quot;, &quot;url&quot; =&gt; &quot;https://dealloc.dev&quot;}) %Wumpex.Resource.Embed.Author{ name: &quot;dealloc&quot;, url: &quot;https://dealloc.dev&quot; }","ref":"Wumpex.Resource.Embed.Author.html#to_struct/1","title":"Wumpex.Resource.Embed.Author.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::name - The name of the author.:url - The URL of the author.:icon_url - The URL of the author icon (only supports http(s) and attachments).:proxy_icon_url - A proxied URL of the author icon.","ref":"Wumpex.Resource.Embed.Author.html#t:t/0","title":"Wumpex.Resource.Embed.Author.t/0","type":"type"},{"doc":"Contains information about custom fields in an Wumpex.Resource.Embed.","ref":"Wumpex.Resource.Embed.Field.html","title":"Wumpex.Resource.Embed.Field","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Field.to_struct(%{}) %Wumpex.Resource.Embed.Field{ name: nil, value: nil, inline: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Field.to_struct(%{&quot;name&quot; =&gt; &quot;dealloc&quot;, &quot;value&quot; =&gt; &quot;https://dealloc.dev&quot;, &quot;inline&quot; =&gt; true}) %Wumpex.Resource.Embed.Field{ name: &quot;dealloc&quot;, value: &quot;https://dealloc.dev&quot;, inline: true }","ref":"Wumpex.Resource.Embed.Field.html#to_struct/1","title":"Wumpex.Resource.Embed.Field.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::name - The name of the field.:value - The value of the field.:inline whether or not this field should display inline.","ref":"Wumpex.Resource.Embed.Field.html#t:t/0","title":"Wumpex.Resource.Embed.Field.t/0","type":"type"},{"doc":"Contains information about the footer of the Wumpex.Resource.Embed.Check the official Discord documentation.","ref":"Wumpex.Resource.Embed.Footer.html","title":"Wumpex.Resource.Embed.Footer","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Footer.to_struct(%{}) %Wumpex.Resource.Embed.Footer{ text: nil, icon_url: nil, proxy_icon_url: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Footer.to_struct(%{&quot;text&quot; =&gt; &quot;footer&quot;, &quot;icon_url&quot; =&gt; &quot;url&quot;}) %Wumpex.Resource.Embed.Footer{ text: &quot;footer&quot;, icon_url: &quot;url&quot;, proxy_icon_url: nil }","ref":"Wumpex.Resource.Embed.Footer.html#to_struct/1","title":"Wumpex.Resource.Embed.Footer.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::text - The footer text:icon_url The URL of the footer icon (only supports http(s) and attachments).:proxy_icon_url A proxied of the footer icon.","ref":"Wumpex.Resource.Embed.Footer.html#t:t/0","title":"Wumpex.Resource.Embed.Footer.t/0","type":"type"},{"doc":"Contains image information of an embed.See the official Discord documentation.","ref":"Wumpex.Resource.Embed.Image.html","title":"Wumpex.Resource.Embed.Image","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Image.to_struct(%{}) %Wumpex.Resource.Embed.Image{ url: nil, proxy_url: nil, height: nil, width: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Image.to_struct(%{&quot;url&quot; =&gt; &quot;url&quot;, &quot;width&quot; =&gt; 0, &quot;height&quot; =&gt; 0}) %Wumpex.Resource.Embed.Image{ url: &quot;url&quot;, proxy_url: nil, width: 0, height: 0 }","ref":"Wumpex.Resource.Embed.Image.html#to_struct/1","title":"Wumpex.Resource.Embed.Image.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::url - The source URL of image (only supports http(s) and attachments).:proxy_url - A proxied URL of the image.:height - The height of the image.:width - The width of the image.","ref":"Wumpex.Resource.Embed.Image.html#t:t/0","title":"Wumpex.Resource.Embed.Image.t/0","type":"type"},{"doc":"Contains information about the provider of the Wumpex.Resource.Embed.","ref":"Wumpex.Resource.Embed.Provider.html","title":"Wumpex.Resource.Embed.Provider","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Provider.to_struct(%{}) %Wumpex.Resource.Embed.Provider{ name: nil, url: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Provider.to_struct(%{&quot;name&quot; =&gt; &quot;dealloc&quot;, &quot;url&quot; =&gt; &quot;https://dealloc.dev&quot;}) %Wumpex.Resource.Embed.Provider{ name: &quot;dealloc&quot;, url: &quot;https://dealloc.dev&quot; }","ref":"Wumpex.Resource.Embed.Provider.html#to_struct/1","title":"Wumpex.Resource.Embed.Provider.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::name - The name of the provider.:url - The URL of the provider.","ref":"Wumpex.Resource.Embed.Provider.html#t:t/0","title":"Wumpex.Resource.Embed.Provider.t/0","type":"type"},{"doc":"Contains thumbnail information for the Wumpex.Resource.Embed.See the official Discord documentation.","ref":"Wumpex.Resource.Embed.Thumbnail.html","title":"Wumpex.Resource.Embed.Thumbnail","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Thumbnail.to_struct(%{}) %Wumpex.Resource.Embed.Thumbnail{ url: nil, proxy_url: nil, height: nil, width: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Thumbnail.to_struct(%{&quot;url&quot; =&gt; &quot;url&quot;, &quot;proxy_url&quot; =&gt; &quot;proxy-url&quot;, &quot;height&quot; =&gt; 100, &quot;width&quot; =&gt; 50}) %Wumpex.Resource.Embed.Thumbnail{ url: &quot;url&quot;, proxy_url: &quot;proxy-url&quot;, height: 100, width: 50 }","ref":"Wumpex.Resource.Embed.Thumbnail.html#to_struct/1","title":"Wumpex.Resource.Embed.Thumbnail.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::url - The URL of the provider.:proxy_url - A proxied URL of the thumbnail.:height - The height of the thumbnail.:width - The width of the thumbnail.","ref":"Wumpex.Resource.Embed.Thumbnail.html#t:t/0","title":"Wumpex.Resource.Embed.Thumbnail.t/0","type":"type"},{"doc":"Contains video information for the Wumpex.Resource.Embed.See the official Discord documentation.","ref":"Wumpex.Resource.Embed.Video.html","title":"Wumpex.Resource.Embed.Video","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Embed.Video.to_struct(%{}) %Wumpex.Resource.Embed.Video{ url: nil, height: nil, width: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Embed.Video.to_struct(%{&quot;url&quot; =&gt; &quot;url&quot;, &quot;height&quot; =&gt; 100, &quot;width&quot; =&gt; 50}) %Wumpex.Resource.Embed.Video{ url: &quot;url&quot;, height: 100, width: 50 }","ref":"Wumpex.Resource.Embed.Video.html#to_struct/1","title":"Wumpex.Resource.Embed.Video.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::url - The URL of the provider.:height - The height of the video.:width - The width of the video.","ref":"Wumpex.Resource.Embed.Video.html#t:t/0","title":"Wumpex.Resource.Embed.Video.t/0","type":"type"},{"doc":"Represent an emoji that can be sent.See the official Discord documentation.","ref":"Wumpex.Resource.Emoji.html","title":"Wumpex.Resource.Emoji","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Emoji.to_struct(%{}) %Wumpex.Resource.Emoji{ id: nil, name: nil, roles: nil, user: nil, require_colons: nil, managed: nil, animated: nil, available: nil }","ref":"Wumpex.Resource.Emoji.html#to_struct/1","title":"Wumpex.Resource.Emoji.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The emoji ID.:name The name of the emoji.:roles - The roles this emoji is whitelisted to.:user - The user that created this emoji.:require_colons - Whether this emoji must be wrapped in colons.:managed - Whether this emoji is managed.:animated - Whether this emoji is animated.:available - Whether this emoji can be used, may be false due to the loss of server boosts.","ref":"Wumpex.Resource.Emoji.html#t:t/0","title":"Wumpex.Resource.Emoji.t/0","type":"type"},{"doc":"Guilds in Discord represent an isolated collection of users and channels, and are often referred to as &quot;servers&quot; in the UI.See the official Discord documentation.","ref":"Wumpex.Resource.Guild.html","title":"Wumpex.Resource.Guild","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Guild.to_struct(%{}) %Wumpex.Resource.Guild{}","ref":"Wumpex.Resource.Guild.html#to_struct/1","title":"Wumpex.Resource.Guild.to_struct/1","type":"function"},{"doc":"Whether Discord will scan and automatically delete messages with explicit content.Can have the following values:0 (DISABLED) - Direct messages will not be scanned for explicit content.1 (MEMBERS_WITHOUT_ROLES) - Scan direct messages from everyone unless they are a friend.2 (ALL_MEMBERS) - Scan direct messages from everyone.","ref":"Wumpex.Resource.Guild.html#t:explicit_content_filter_level/0","title":"Wumpex.Resource.Guild.explicit_content_filter_level/0","type":"type"},{"doc":"This will determine whether members who have not explicitly set their notification settings receive a notification for every message sent in this server or not.Discord highly recommends setting this to only @mentions or 1 in the code, for a public Discord to avoid this insanity.Can have the following values:0 (ALL_MESSAGES) - All Messages1 (ONLY_MENTIONS) - Only @mentions","ref":"Wumpex.Resource.Guild.html#t:message_notifications_level/0","title":"Wumpex.Resource.Guild.message_notifications_level/0","type":"type"},{"doc":"When enabled, this requires members with moderation powers to have two-factor authentication enabled on their account in order to take moderation actions (e.g. kick, ban, and delete message). This can help prevent malicious people who compromise a mod or admin's account from taking destructive actions. This setting can only be changed by the server owner if they have 2FA enabled on their account.Can have the following values:0 (NONE)1 (ELEVATED)","ref":"Wumpex.Resource.Guild.html#t:mfa_level/0","title":"Wumpex.Resource.Guild.mfa_level/0","type":"type"},{"doc":"server boost levelCan have the following values:0 - None1 - Tier 12 - Tier 23 - Tier 3","ref":"Wumpex.Resource.Guild.html#t:premium_tier/0","title":"Wumpex.Resource.Guild.premium_tier/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The guild ID.:name - The guild name (2 - 100 characters, excluding trailing and leading whitespace).:icon - The icon hash.:splash - The splash hash.:discovery_splash - The discovery splash hash (only present for guilds with the &quot;DISCOVERABLE&quot; feature).:owner - true if the user is the owner of the guild.:owner_id - The ID of the owner.:permissions - Total permissions of the user in the guild (excluding overrides).:region - The voice region (ID) of the guild.:afk_channel_id - The ID of the AFk channel.:afk_timeout - The AFK timeout (in seconds).:embed_enabled - deprecated, use widget_enabled instead).:embed_channel_id - deprecated, use widget_channel_id instead.:verification_level - The verification_level/0 required for the guild.:default_message_notifications - The default message_notifications_level/0.:explicit_content_filter - The explicit_content_filter_level/0.:roles - An array of the Wumpex.Resource.Role in the guild.:emojis - Custom guild emojis.:features - A list of enabled guild features.:mfa_level - The MFA level for this guild.:application_id - The application ID of the guild creator, if it's bot-created.:widget_enabled - Set to true if the server widget is enabled.:widget_channel_id - The channel ID that the widget will generate an invite to, or null if set to no invite.:system_channel_id - The ID of the channel where guild notices such as welcome and boost evens are posted.:system_channel_flags - The Wumpex.Resource.Guild.ChannelFlags for the guild.:rules_channel_id - The ID of the channel where guilds with the &quot;PUBLIC&quot; feature can display rules and/or guidelines.:joined_at - When this guild was joined.:large - Whether this guild is considered large.:unavailable - Whether this guild is unavailable due to an outage.:member_count - Total number of members in this guild.:voice_states - Voice states of members curretly in voice channels (without the guild_id key).:members - An array of Wumpex.Resource.Guild.Member objects representing the users in the guild.:channels - A list of Wumpex.Resource.Channel objects representing the channels in the guild.:presences - Presences of the members in the guild, will only include non-offline mbmers if the size is greater than large treshold.:max_presences - The maximum number of presences for the guild (default value, currently 25000, is in effect when null is returned).:max_members - The maximum number of members for the guild.:vanity_url_code - The vanity URL code for the guild.:description - The description for the guild, if discoverable.:banner - The banner hash.:premium_tier - The server boost level (premium level).:premium_subscription_count - The number of boosts this guild currently has.:preferred_locale - The preferred locale of a guild with the &quot;PUBLIC&quot; feature, used in server discovery and notices from Discord (defaults to &quot;en-US&quot;).:pubic_updates_channel_id - The ID of the channel where admins and moderators of guilds with the &quot;PUBLIC&quot; feature receive notices from Discord.:max_video_channel_users - The maximum amount of users in a video channel.:approximate_member_count - The approximate number of members in this guild, returned from the get guilds endpoint (when passing with_counts set to true).:approximate_presence_count - Approximate number of non-offline members in this guild, returned from the get guilds endpoint (when passing with_counts set to true).","ref":"Wumpex.Resource.Guild.html#t:t/0","title":"Wumpex.Resource.Guild.t/0","type":"type"},{"doc":"Members of the server must meet the following criteria before they can send messages in text channels or initiate a direct message conversation. If a member has an assigned role this does nto apply. Discord recommends setting a verification level for a public guild.Can have the following values:0 (NONE) - Unrestricted.1 (LOW) - Must have verified email on account.2 (MEDIUM) - Must be registered on Discord for longer than 5 minutes.3 (HIGH) - (╯°□°）╯︵ ┻━┻ - must be a member of the server for longer than 10 minutes.4 (VERY_HIGH) - ┻━┻ ミヽ(ಠ 益 ಠ)ﾉ彡 ┻━┻ - must have a verified phone number.","ref":"Wumpex.Resource.Guild.html#t:verification_level/0","title":"Wumpex.Resource.Guild.verification_level/0","type":"type"},{"doc":"Represents system channel flags for a guild.See the official Discord documentation.","ref":"Wumpex.Resource.Guild.ChannelFlags.html","title":"Wumpex.Resource.Guild.ChannelFlags","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Guild.ChannelFlags.to_struct(0) %Wumpex.Resource.Guild.ChannelFlags{ suppress_join_notifications: false, suppress_premium_subscriptions: false }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Guild.ChannelFlags.to_struct(1) %Wumpex.Resource.Guild.ChannelFlags{ suppress_join_notifications: true, suppress_premium_subscriptions: false }","ref":"Wumpex.Resource.Guild.ChannelFlags.html#to_struct/1","title":"Wumpex.Resource.Guild.ChannelFlags.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::suppress_join_notifications - Whether a message will be shown in the system channel when a new user joins.:suppress_premium_subscriptions - Whether a message will be shown in the system channel when a user boosts the server.","ref":"Wumpex.Resource.Guild.ChannelFlags.html#t:t/0","title":"Wumpex.Resource.Guild.ChannelFlags.t/0","type":"type"},{"doc":"Represents a member of a guild.See the official Discord documentation.","ref":"Wumpex.Resource.Guild.Member.html","title":"Wumpex.Resource.Guild.Member","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Guild.Member.to_struct(%{}) %Wumpex.Resource.Guild.Member{ user: nil, nick: nil, roles: nil, joined_at: nil, premium_since: nil, deaf: nil, mute: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Guild.Member.to_struct(%{&quot;nick&quot; =&gt; &quot;dealloc&quot;}) %Wumpex.Resource.Guild.Member{ user: nil, nick: &quot;dealloc&quot;, roles: nil, joined_at: nil, premium_since: nil, deaf: nil, mute: nil }","ref":"Wumpex.Resource.Guild.Member.html#to_struct/1","title":"Wumpex.Resource.Guild.Member.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::user - The user this guild member represents.:nick - This user's guild nickname.:roles - A list of role object ids.:joined_at - A DateTime of when the user joined the guild.:premium_since - When the user started boosting the guild.:deaf - Whether the user is deafened in voice channels.:mute - Whether the user is muted in voice channels.","ref":"Wumpex.Resource.Guild.Member.html#t:t/0","title":"Wumpex.Resource.Guild.Member.t/0","type":"type"},{"doc":"Represents a message sent in a channel within Discord.See the official Discord documentation.","ref":"Wumpex.Resource.Message.html","title":"Wumpex.Resource.Message","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Message.to_struct(%{}) %Wumpex.Resource.Message{}","ref":"Wumpex.Resource.Message.html#to_struct/1","title":"Wumpex.Resource.Message.to_struct/1","type":"function"},{"doc":"The type of message.Can have the following values:0 - Regular message.1 - Recipient was added.2 - Recipient was removed.3 - Call started.4 - Channel name changed.5 - Channel icon changed.6 - Channel message was pinned.7 - A guild member joined.8 - User boosted the server.9 - A user boosted the server to tier 1.10 - A user boosted the server to tier 2.11 - A user boosted the server to tier 3.12 - A channel follow add.14 - Guild discovery disqualified.15 - Guild discovery re-qualified.","ref":"Wumpex.Resource.Message.html#t:message_type/0","title":"Wumpex.Resource.Message.message_type/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the message.:channel_id - The ID of the channel the message was sent in.:guild_id - The ID of the guild the message was sent in.:author - The author of this message (not guaranteerd to be a valid user).:member - Member properties for the message author.:content - The contents of the message.:timestamp - The timestamp when this message was sent.:edited_timestamp - When this message was edited (set to nil if it's never been edited).:tts - Whether this was a TTS message.:mention_everyone - Whether this message mentions everyone.:mentions - An array of Wumpex.Resource.User objects mentioned in this message.:mention_roles - A list of role IDs specifically mentioned in this message.:mention_channels - lis of Wumpex.Resource.ChannelMention specifically mentioned in this message.:attachments - Any attached files.:embeds - Any embedded content.:reactions - A list of Wumpex.Resource.Message.Reaction reacted to this message.:nonce - A unique nonce, can be used for validating the message was sent.:pinned - Whether this message is pinned.:webhook_id - The ID of the webhook, if it was generated by one.:type - The message_type/0.:activity - A Wumpex.Resource.Activity object, sent with rich presence related chat embeds.:application - sent with rich presence related chat embeds.:message_reference - Reference data sent with crossposted messages.:flags - Message flags, describes extra features of the message.","ref":"Wumpex.Resource.Message.html#t:t/0","title":"Wumpex.Resource.Message.t/0","type":"type"},{"doc":"Sent with Rich Presence-related chat embeds.","ref":"Wumpex.Resource.Message.Activity.html","title":"Wumpex.Resource.Message.Activity","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Message.Activity.to_struct(%{}) %Wumpex.Resource.Message.Activity{ type: nil, party_id: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Message.Activity.to_struct(%{&quot;type&quot; =&gt; 1, &quot;party_id&quot; =&gt; &quot;123&quot;}) %Wumpex.Resource.Message.Activity{ type: 1, party_id: &quot;123&quot; }","ref":"Wumpex.Resource.Message.Activity.html#to_struct/1","title":"Wumpex.Resource.Message.Activity.to_struct/1","type":"function"},{"doc":"The type of activity.Can have the following values:1 - JOIN2 - SPECTATE3 - LISTEN5 - JOIN_REQUEST","ref":"Wumpex.Resource.Message.Activity.html#t:activity_type/0","title":"Wumpex.Resource.Message.Activity.activity_type/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::type - The activity_type/0.:party_id - The party_id from a rich presence event.","ref":"Wumpex.Resource.Message.Activity.html#t:t/0","title":"Wumpex.Resource.Message.Activity.t/0","type":"type"},{"doc":"Application information sent with Rich presence related embeds.See the official Discord documentation.","ref":"Wumpex.Resource.Message.Application.html","title":"Wumpex.Resource.Message.Application","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Message.Application.to_struct(%{}) %Wumpex.Resource.Message.Application{ id: nil, cover_image: nil, description: nil, icon: nil, name: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Message.Application.to_struct(%{&quot;id&quot; =&gt; &quot;snowflake&quot;}) %Wumpex.Resource.Message.Application{ id: &quot;snowflake&quot;, cover_image: nil, description: nil, icon: nil, name: nil }","ref":"Wumpex.Resource.Message.Application.html#to_struct/1","title":"Wumpex.Resource.Message.Application.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the application:cover_image - The ID of the embed's image asset.:description - The description of the application.:icon - The ID of the application's icon.:name - The name of the application.","ref":"Wumpex.Resource.Message.Application.html#t:t/0","title":"Wumpex.Resource.Message.Application.t/0","type":"type"},{"doc":"Represents a reaction to a message.See the official Discord documentation.","ref":"Wumpex.Resource.Message.Reaction.html","title":"Wumpex.Resource.Message.Reaction","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Message.Reaction.to_struct(%{}) %Wumpex.Resource.Message.Reaction{ count: nil, me: nil, emoji: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Message.Reaction.to_struct(%{&quot;count&quot; =&gt; 1, &quot;me&quot; =&gt; true, &quot;emoji&quot; =&gt; %{}}) %Wumpex.Resource.Message.Reaction{ count: 1, me: true, emoji: %Wumpex.Resource.Emoji{} }","ref":"Wumpex.Resource.Message.Reaction.html#to_struct/1","title":"Wumpex.Resource.Message.Reaction.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::count - The amount of times this emoji has been used to react to the message.:me - Whether the current user has used this emoji to react to the message.:emoji - The emoji this reaction represents.","ref":"Wumpex.Resource.Message.Reaction.html#t:t/0","title":"Wumpex.Resource.Message.Reaction.t/0","type":"type"},{"doc":"Reference data sent with crossposted messages.See the official Discord documentation.","ref":"Wumpex.Resource.Message.Reference.html","title":"Wumpex.Resource.Message.Reference","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Message.Reference.to_struct(%{}) %Wumpex.Resource.Message.Reference{ message_id: nil, channel_id: nil, guild_id: nil }If you pass in known properties, they'll be mapped.iex&gt; Wumpex.Resource.Message.Reference.to_struct(%{&quot;message_id&quot; =&gt; &quot;snowflake&quot;}) %Wumpex.Resource.Message.Reference{ message_id: &quot;snowflake&quot; }","ref":"Wumpex.Resource.Message.Reference.html#to_struct/1","title":"Wumpex.Resource.Message.Reference.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::message_id - The ID of the originating message.:channel_id - The ID of the originating message's channel.:guild_id - The ID of the originating message's guild.","ref":"Wumpex.Resource.Message.Reference.html#t:t/0","title":"Wumpex.Resource.Message.Reference.t/0","type":"type"},{"doc":"A user's presence is their current state on a guild. This event is sent when a user's presence or info, such as name or avatar, is updated.See the official Discord documentation.","ref":"Wumpex.Resource.PresenceUpdate.html","title":"Wumpex.Resource.PresenceUpdate","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.PresenceUpdate.to_struct(%{}) %Wumpex.Resource.PresenceUpdate{}","ref":"Wumpex.Resource.PresenceUpdate.html#to_struct/1","title":"Wumpex.Resource.PresenceUpdate.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::user - The user whose presence is being updated.:roles - The roles this user is in.:game - nil, or the user's current activity.:guild_id - The ID of the guild.:status - Either &quot;idle&quot;, &quot;dnd&quot;, &quot;online&quot; or &quot;offline&quot;.:activities - A list of the user's current Wumpex.Resource.Activity.:client_status - User's platform dependent Wumpex.Resource.ClientStatus.:premium_since - When the user started boosting the guild.:nick - This user's guild nickname (if one is set).","ref":"Wumpex.Resource.PresenceUpdate.html#t:t/0","title":"Wumpex.Resource.PresenceUpdate.t/0","type":"type"},{"doc":"Roles represent a set of permissions attached to a group of users. Roles have unique names, colors, and can be &quot;pinned&quot; to the side bar, causing their members to be listed separately. Roles are unique per guild, and can have separate permission profiles for the global context (guild) and channel context. The @everyone role has the same ID as the guild it belongs to.See the official Discord documentation.","ref":"Wumpex.Resource.Role.html","title":"Wumpex.Resource.Role","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.Role.to_struct(%{}) %Wumpex.Resource.Role{}","ref":"Wumpex.Resource.Role.html#to_struct/1","title":"Wumpex.Resource.Role.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the role.:name - The name of the role.:color - The color of the role, represented as a hex number.:hoist Whether this role is pinned in the user filtering.:position - The position of the role in the UI.:permissions - Permission bit set.:managed - Whether this role is managed by an integration.:mentionable - Whether this role is mentionable.","ref":"Wumpex.Resource.Role.html#t:t/0","title":"Wumpex.Resource.Role.t/0","type":"type"},{"doc":"Users in Discord are generally considered the base entity. Users can spawn across the entire platform, be members of guilds, participate in text and voice chat, and much more. Users are separated by a distinction of &quot;bot&quot; vs &quot;normal&quot;. Although they are similar, bot users are automated users that are &quot;owned&quot; by another user. Unlike normal users, bot users do not have a limitation on the number of Guilds they can be a part of.See the official Discord documentation.","ref":"Wumpex.Resource.User.html","title":"Wumpex.Resource.User","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.User.to_struct(%{}) %Wumpex.Resource.User{}","ref":"Wumpex.Resource.User.html#to_struct/1","title":"Wumpex.Resource.User.to_struct/1","type":"function"},{"doc":"Premium types denote the level of premium a user has.Can have the following values:0 None1 Nitro Classic2 Nitro","ref":"Wumpex.Resource.User.html#t:premium_type/0","title":"Wumpex.Resource.User.premium_type/0","type":"type"},{"doc":"Represents the struct form of this module.Contains the following fields::id - The ID of the user.:username - The user's username, not unique across the platform.:discriminator - The user's 4 digit discord-tag.:avatar - The user's avatar hash.:bot - Whether the user belongs to an OAuth2 application.:system - Whether the user is an official Discord system user (part of the urgent message system).:mfa_enabled - Whether the user has two factor enabled on their account.:locale- The user's preferred locale.:verified - Whether the user's email has been verified.:email - The user's email.:flags - The flags on a user's account.:premium_type - The type of Nitro subscription of the user.:public_flags - The public flags on a user's account.:member - Only passed when the user object was received through a Wumpex.Resource.Message object.","ref":"Wumpex.Resource.User.html#t:t/0","title":"Wumpex.Resource.User.t/0","type":"type"},{"doc":"Struct representing the flags a user account can have.","ref":"Wumpex.Resource.UserFlags.html","title":"Wumpex.Resource.UserFlags","type":"module"},{"doc":"Maps the incoming data into struct form.Example:iex&gt; Wumpex.Resource.UserFlags.to_struct(0) %Wumpex.Resource.UserFlags{ bug_hunter_level_1: false, bug_hunter_level_2: false, discord_employee: false, discord_partner: false, early_supporter: false, house_balance: false, house_bravery: false, house_brilliance: false, hypesquad_events: false, none: true, system: false, team_user: false, verified_bot: false, verified_bot_developer: false }","ref":"Wumpex.Resource.UserFlags.html#to_struct/1","title":"Wumpex.Resource.UserFlags.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::none - Indicates no flags are set.:discord_employee - Indicates this user is a Discord employee.:discord_partner - Indicates that this user is a Discord partner.:hypesquad_events - Hypesquad events.:bug_hunter_level_1 - This user is bug hunter level 1.:house_bravery - This user is sorted into the house Bravery.:house_brilliance - This user is sorted into the house Brilliance.:house_balance - This user is sorted into the house Balance.:early_supporter - This user is an early supporter.:team_user - Team user.:system - Indicates the user is a system user.:bug_hunter_level_2 - This user is bug hunter level 2.:verified_bot - This user is a verified bot.:verified_bot_developer - This user is a verified bot developer.","ref":"Wumpex.Resource.UserFlags.html#t:t/0","title":"Wumpex.Resource.UserFlags.t/0","type":"type"},{"doc":"Represents a user's voice connection status.See the official Discord documentation.","ref":"Wumpex.Resource.VoiceState.html","title":"Wumpex.Resource.VoiceState","type":"module"},{"doc":"Maps the incoming data into struct form.Example:You can pass in invalid or missing data, it will ignore what doesn't match.iex&gt; Wumpex.Resource.VoiceState.to_struct(%{}) %Wumpex.Resource.VoiceState{}","ref":"Wumpex.Resource.VoiceState.html#to_struct/1","title":"Wumpex.Resource.VoiceState.to_struct/1","type":"function"},{"doc":"Represents the struct form of this module.Contains the following fields::guild_id - The ID of the guild this voice state is for.:channel_id - The channel ID this user is connected to.:user_id - The ID of the user this voice state is for.:member - The guild member this voice state is for.:session_id - The session ID for this voice state.:deaf - Whether this user is deafened by the server.:mute - Whether this user is muted by the server.:self_deaf - Whether this user has deafened himself.:self_mute - Whether this user has muted himself.:self_stream - Whether this user is streaming using &quot;Go Live&quot;.:self_video - Whether this user's camera is enabled.:suppress - Whether this user is muted by the current user.","ref":"Wumpex.Resource.VoiceState.html#t:t/0","title":"Wumpex.Resource.VoiceState.t/0","type":"type"},{"doc":"Manages the shards connected to the gateway.This module will retrieve the required information from the Discord API and start shards accordingly.","ref":"Wumpex.Sharding.html","title":"Wumpex.Sharding","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Wumpex.Sharding.html#child_spec/1","title":"Wumpex.Sharding.child_spec/1","type":"function"},{"doc":"","ref":"Wumpex.Sharding.html#start_link/1","title":"Wumpex.Sharding.start_link/1","type":"function"},{"doc":"Represents the options that can be passed to start_link/1.Contains the following fields::handlers - The event handlers that will be registered for each shard.","ref":"Wumpex.Sharding.html#t:options/0","title":"Wumpex.Sharding.options/0","type":"type"},{"doc":"Represents the state of the Sharding process.Contains the following fields::url - The URL of the Discord gateway to connect to.:concurrency - How many shards can be started concurrently.:handlers - A list of modules that handle incoming events on the gateway.","ref":"Wumpex.Sharding.html#t:state/0","title":"Wumpex.Sharding.state/0","type":"type"},{"doc":"Keeps track of all active shards by their name.This module uses Wumpex.Base.Ledger under the hood.","ref":"Wumpex.Sharding.ShardLedger.html","title":"Wumpex.Sharding.ShardLedger","type":"module"},{"doc":"Looks up the pid/0 with metadata for a given name. Returns nil if no entry could be found for the given name.iex&gt; MyLedger.register(&quot;some-process&quot;, self(), &quot;metadata&quot;) :yes iex&gt; MyLedger.lookup(&quot;some-process&quot;) {pid, &quot;metadata&quot;}See register/3 for setting metadata.","ref":"Wumpex.Sharding.ShardLedger.html#lookup/1","title":"Wumpex.Sharding.ShardLedger.lookup/1","type":"function"},{"doc":"Register a given pid/0 under the given :name in the registry, optionally passing in metadata.","ref":"Wumpex.Sharding.ShardLedger.html#register/3","title":"Wumpex.Sharding.ShardLedger.register/3","type":"function"}]